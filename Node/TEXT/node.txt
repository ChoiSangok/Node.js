+ 노드란
  Javascript 의 runtime -> javascript program 을 실행할 수 있게 해줌

 - 비동기와 이벤트 : 브라우저
  노드는 서버 측 자바스크립트에 이벤트 주도 방식과 비동기 플랫폼을 제공.
  브라우저 클라운트가 자바스크립트를 사용하는 것처럼 -> 서버에서도 자바스크립트 사용이 가능
  
 * nodeJS 설치방법
  Node.js 설치 

 1. https://nodejs.org/ko/download/ 맞는 버전 다운로드 
 2. 설정 기본으로 설정 
    옵션 고르는 화면에서 npm 패키지도 들어있으니 설치 
    
 3. cmd - node -v, npm -v 이용해 깔렸나 확인
 
  
 + express server
  - javascript를 서버로 사용하려면 nodeJS 프레임워크를 사용해야 함..
  - nodeJS 를 사용하면 REST형태의 서버를 모두 구현할 수 있는데 
    nodeJS를 사용한 express 서버를 편리하게 구현해주는 프레임워크로 express가 대중화 
    
  + 주요기능
    - HTTP 통신(GET, POST, DELETE, 등 ) 
  
  * express 설치
 
 1. npm install express -g
    global x -> npm install express
  오류 난다면 npm express -generator -g
  
  npm install -g express-generator

  
 2. 설치 완료하면 express my-app
    
    VScode도 같이 설치

    설치 후
    express -e myapp

    cd myapp && npm install

 * 프로젝트 구조
  - 4개의 디렉토리와 2개의 파일이 생성
  
    directory :
      bin : 실제 서버가 실행
      public : images, js, css파일과 같은 정적파일 관리
      routes : 실제 서버 로직이 처리
      views : html, jade, ejs같은 웹 페이지 관리
      
    file :
      app.js : 미들 웨어 설정
      package.json : 프로젝트 관리
      
      
      
+ express - generator

NodeJS + Express 구조
프로젝트 생성 : express -e <프로젝트이름>
서버시작 : npm start
모듈설치 : npm install
elastic 설치 : npm install @elastic/elasticsearch

프로젝트 구조
1. /bin/www
  - 서버를 실행하는 스크립트
  - 프로젝트 돌아가는 포트번호 바꿀 수 있음

2. /public
  - 외부에서 접근 가능한 파일을 모아둠
  - 리소스들이 돌아감
  - /images : 그림파일 저장
  - /javascript : 자바스크립트 파일들을 저장
  - /stylesheets : css파일저장
  
3. /router - (음 자바의 컨트롤러와 비슷한 역할인강?)
             ( 그런듯..ㅎ... ) 
             
  - 페이지 라우팅과 관련된 파일 저장( 주소별 라우터들을 모아둠 )
  - url별로 실행되는 실제 서버 조직
  - index.js 파일로 라우팅 관리
  
4. /public
  - jade, ejs파일 등 템플릿 파일 모아둠
  - 웹 서버 사용시 이 폴더의 파일들을 사용해 렌더링
  
5. app.js
  - 핵섬적인 서버 역할 ( 프로젝트의 중심 )
  - 미들웨어 관리가 이루어짐
  - 라우팅의 시작

6. /package.json
  - npm의 의존 파일
