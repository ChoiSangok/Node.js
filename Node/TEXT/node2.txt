+ Node <동기, 비동기>

 - 동기와 비동기의 차이점
  * 요청받고 응답받는 시간대이 차이 
  
  1. 동기 ( Synchronous )  : 요청과 응답이 같은 시간대 "안에" 고정되어 있어, 요청에 대한 응답이 완료되기까지 프로그램이 정지 !
            요청을 하는 시기와 응답을 받는 시기가 일치!
            
  2. 비동기 ( Asynchronous ) : 요청-응답 간 결합이 자유로워 프로그램이 응답 받기 위해 대기하지 않고 다음 로직을 수행 !
  
 + 콜백함수( callback ) 
  - 콜백함수가 실행됐다는 것으로 요청한 작업이 끝남을 알리고, 작업의 결과물을 콜백함수를 통해 사용가능
 
 + 콜백헬
  - 콜백함수가 늘어날수도 코드의 깊이가 깊어져 더이상 헤어날 수 없다는 의미로, 코드의 가독성이 떨어짐
  

+ Promise
  - 콜백함수, 콜백헬 함수를 해결하기 위해 나타난 Promise 개념
  
  1. 비동기식 함수에서 처리된 결과값을 반환할 경우 -> 비동기함수에서 코드가 복잡하다면 찾는데 어려움 -> 그러나 promise는 간단하게 쉽게 찾을 수 있음.
  2. 비동기 처리를 위한 콜백패턴이 처리순서를 보장하지 않는다
  3. 에러처리에대한 한계 가 있다.
  
  
 * Promise함수는
  - promise로 구현된 비동기 처리 함수는 콜백을 예측가능한 패턴으로 사용하도록 도와주고, 콜백함수가 성공, 실패, 오류이 경우에 따라 후속처리를 가능하게 한다.
  - 순차적이지 않는 비동기함수의 실행순서를 제어 해주고, 코드 가독성이 좋고 결과물을 사용하기 편함
  
 + 구조 
  - 선언부
    - 프로미스 객체를 만드는 곳
  - 동작부
    - 선언된 것을 호출하는 곳 
  

   * promise

      function create() {
        return new Promise(function (resolve, reject) {
          resolve();
          console.log("step1");
        });
      };

      create().then(function(){
        console.log("step3-succeed");
      }, function(){
        console.log("step3-failed");
      });

      console.log("step2");
      
   * 실행결과
   step1
   step2
   step3- succeed
